{"version":3,"sources":["vdom/createElement.js","vdom/render.js","vdom/mount.js","vdom/diff.js","main.js"],"names":["tagName","attrs","children","renderElement","vNode","$el","document","createElement","Object","entries","key","value","setAttribute","child","$child","render","appendChild","createTextNode","$node","$target","replaceWith","diffAttrs","oldAttrs","newAttrs","patches","push","removeAttribute","patch","diffChildrens","oldVChildren","newVChildren","index","length","oldVChild","newVChild","diff","additionalPatches","additionalVChild","slice","$parent","childNodes","vOldNode","vNewNode","undefined","remove","$newNode","patchAttrs","patchChildrens","createVApp","count","id","dataCount","type","String","Array","from","src","vApp","$app","$root","getElementById","setInterval","vNewApp","console","log"],"mappings":"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","file":"main.1f19ae8e.map","sourceRoot":"..","sourcesContent":["export default (tagName, { attrs = {}, children = [] } = {}) => {\n    return {\n        tagName,\n        attrs,\n        children,\n    };\n}","const renderElement = (vNode) => {\n    const $el = document.createElement(vNode.tagName);\n\n    // Set Attributes\n    for (const [key, value] of Object.entries(vNode.attrs)) {\n        $el.setAttribute(key, value)\n    }\n\n    //Set Children\n    for (const child of vNode.children) {\n        const $child = render(child);\n        $el.appendChild($child);\n    }\n\n    return $el;\n}\n\nconst render = (vNode) => {\n    if(typeof vNode === 'string') {\n        return document.createTextNode(vNode)\n    }\n\n    return renderElement(vNode);\n}\n\nexport default render;","export default ($node, $target) => {\n    $target.replaceWith($node);\n    return $node;\n}","import render from './render';\n\nconst diffAttrs = (oldAttrs, newAttrs) => {\n    const patches = [];\n    for (const [key, value] of Object.entries(newAttrs)) {\n        patches.push(($node) => {\n            $node.setAttribute(key, value);\n            return $node;\n        });\n    }\n\n    for (const [key] of Object.entries(oldAttrs)) {\n        if(!(key in newAttrs)) {\n            patches.push(($node) => {\n                $node.removeAttribute(key);\n                return $node;\n            });\n        }\n    }\n \n    return ($node) => {\n        for(const patch of patches) {\n            patch($node);\n        }\n        return $node;\n    }\n};\n\nconst diffChildrens= (oldVChildren, newVChildren) => {\n    const patches = [];\n    for (let index = 0; index < oldVChildren.length; index++) {\n        const oldVChild = oldVChildren[index];\n        const newVChild = newVChildren[index];\n        patches.push(diff(oldVChild, newVChild))\n    }\n\n    const additionalPatches = [];\n    for (const additionalVChild of newVChildren.slice(oldVChildren.length)) {\n        additionalPatches.push(($node) => {\n            $node.appendChild(render(additionalVChild));\n            return $node;\n        });\n    };\n\n    return ($parent) => {\n        for (let index = 0; index < $parent.childNodes.length; index++) {\n            patches[index]($parent.childNodes[index]);\n        }\n\n        for (const patch of additionalPatches) {\n            patch($parent);\n        }\n\n        return $parent;\n    }\n};\n\nconst diff = (vOldNode, vNewNode) => {\n    if(vNewNode === undefined) {\n        return ($node) => {\n            $node.remove();\n            return undefined;\n        };\n    }\n\n    if(typeof vOldNode === 'string' || typeof vNewNode === 'string') {\n        if(vOldNode !== vNewNode) {\n            return ($node) => {\n                const $newNode = render(vNewNode);\n                $node.replaceWith($newNode);\n                return $newNode;\n            }\n        } else {\n            return ($node) => undefined;\n        }\n    }\n\n    if(vOldNode.tagName !== vNewNode.tagName) {\n        return ($node) => {\n            const $newNode = render(vNewNode);\n            $node.replaceWith($newNode);\n            return $newNode;\n        };\n    }\n\n    const patchAttrs = diffAttrs(vOldNode.attrs, vNewNode.attrs);\n    const patchChildrens = diffChildrens(vOldNode.children, vNewNode.children);\n\n    return ($node) => {\n        patchAttrs($node);\n        patchChildrens($node);\n        return $node;\n    };    \n};\n\n\n\nexport default diff;","import createElement from './vdom/createElement';\nimport render from './vdom/render';\nimport mount from './vdom/mount';\nimport diff from './vdom/diff';\n\nconst createVApp = (count) => createElement('div', {\n    attrs: {\n        id: 'app',\n        dataCount: count,\n    },\n    children: [\n        createElement('input', {\n            attrs: {\n                type: 'text',\n            }\n        }),\n        String(count),\n        ...Array.from({ length: count }, () => createElement('img', {\n            attrs: {\n                src: 'https://media.giphy.com/media/Vp4cpDCA4Pwm4/giphy.gif'\n            }\n        }))\n    ]\n});\n\n\nlet count = 0;\nlet vApp = createVApp(count);\nconst $app = render(vApp);\n\nlet $root = mount($app, document.getElementById('app'));\n\nsetInterval(() => {\n    count ++;\n    const vNewApp = createVApp(count);\n    const patch = diff(vApp, vNewApp);\n\n    $root = patch($root)\n    vApp = vNewApp;\n}, 1000);\n\nconsole.log($root);\n\n"]}